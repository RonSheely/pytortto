Sqrt:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.sqrt(..., out=...)
  forward_outplace: xp.sqrt(...)
  save_for_backward: yt0
  params:
  backward: ["gd... / (yd... * 2)"]


Exp:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.exp(..., out=...)
  forward_outplace: xp.exp(...)
  save_for_backward: yt0
  params:
  backward: ["gd... * yd..."]


Tan:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.tan(..., out=...)
  forward_outplace: xp.tan(...)
  save_for_backward: yt0
  params:
  backward: ["gd... * (1 + yd... * yd...)"]


Tanh:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.tanh(..., out=...)
  forward_outplace: xp.tanh(...)
  save_for_backward: yt0
  params:
  backward: ["gd... * (1 - yd... * yd...)"]


Sigmoid:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.exp(-xp.logaddexp(0, -..., out=...), out=...)
  forward_outplace: xp.exp(-xp.logaddexp(0, -...))
  save_for_backward: yt0
  params:
  backward: ["gd... * yd... * (1 - yd...)"]


Sign:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: xp.sign(...)
  save_for_backward:
  params:
  backward: ["xp.zeros_like(gd...)"]


Neg:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.negative(..., out=...)
  forward_outplace: xp.negative(...)
  save_for_backward:
  params:
  backward: ["-gd..."]


Add:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.add(..., ///, out=...)
  forward_outplace: xp.add(..., ///)
  save_for_backward:
  params: shape
  backward: ["reverse_broadcast(gd0, xd..._shape)"]


Sub:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.subtract(..., ///, out=...)
  forward_outplace: xp.subtract(..., ///)
  save_for_backward:
  params: shape
  backward: ["reverse_broadcast(gd0, xd..._shape)", "-reverse_broadcast(gd0, xd..._shape)"]


Sin:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.sin(..., out=...)
  forward_outplace: xp.sin(...)
  save_for_backward: xt0
  params:
  backward: ["gd... * xp.cos(xd...)"]


Cos:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.cos(..., out=...)
  forward_outplace: xp.cos(...)
  save_for_backward: xt0
  params:
  backward: ["-gd... * xp.sin(xd...)"]


Log:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.log(..., out=...)
  forward_outplace: xp.log(...)
  save_for_backward: xt0
  params:
  backward: ["gd... / xd..."]


Abs:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.abs(..., out=...)
  forward_outplace: xp.abs(...)
  save_for_backward: xt0
  params:
  backward: ["gd... * xp.sign(xd...)"]


Pow:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.power(..., ///, out=...)
  forward_outplace: xp.power(..., ///)
  save_for_backward: xt0, xt1, yt0
  params: shape
  backward: ["reverse_broadcast(gd0 * xd/// * yd... / xd..., xd..._shape)", "reverse_broadcast(gd0 * xp.log(xd...) * yd..., xd///_shape)"]
