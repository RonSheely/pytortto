Sqrt:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.sqrt(..., out=...)
  forward_outplace: xp.sqrt(...)
  save_for_backward: yt0
  params:
  backward: ["gd0 / (yd0 * 2)"]
  backward_additional:


Exp:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.exp(..., out=...)
  forward_outplace: xp.exp(...)
  save_for_backward: yt0
  params:
  backward: ["gd0 * yd0"]
  backward_additional:


Tan:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.tan(..., out=...)
  forward_outplace: xp.tan(...)
  save_for_backward: yt0
  params:
  backward: ["gd0 * (1 + yd0 * yd0)"]
  backward_additional:


Tanh:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.tanh(..., out=...)
  forward_outplace: xp.tanh(...)
  save_for_backward: yt0
  params:
  backward: ["gd0 * (1 - yd0 * yd0)"]
  backward_additional:


Sigmoid:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.exp(-xp.logaddexp(0, -..., out=...), out=...)
  forward_outplace: xp.exp(-xp.logaddexp(0, -...))
  save_for_backward: yt0
  params:
  backward: ["gd0 * yd0 * (1 - yd0)"]
  backward_additional:


Sign:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: xp.sign(...)
  save_for_backward:
  params:
  backward: ["xp.zeros_like(gd0)"]
  backward_additional:


Neg:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.negative(..., out=...)
  forward_outplace: xp.negative(...)
  save_for_backward:
  params:
  backward: ["-gd0"]
  backward_additional:


Add:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.add(..., ///, out=...)
  forward_outplace: xp.add(..., ///)
  save_for_backward:
  params: shape
  backward: ["reverse_broadcast(gd0, x0_shape)", "reverse_broadcast(gd0, x1_shape)"]
  backward_additional:


Sub:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.subtract(..., ///, out=...)
  forward_outplace: xp.subtract(..., ///)
  save_for_backward:
  params: shape
  backward: ["reverse_broadcast(gd0, x0_shape)", "-reverse_broadcast(gd0, x1_shape)"]
  backward_additional:


Sin:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.sin(..., out=...)
  forward_outplace: xp.sin(...)
  save_for_backward: xt0
  params:
  backward: ["gd0 * xp.cos(xd0)"]
  backward_additional:


Cos:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.cos(..., out=...)
  forward_outplace: xp.cos(...)
  save_for_backward: xt0
  params:
  backward: ["-gd0 * xp.sin(xd0)"]
  backward_additional:


Log:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.log(..., out=...)
  forward_outplace: xp.log(...)
  save_for_backward: xt0
  params:
  backward: ["gd0 / xd0"]
  backward_additional:


Abs:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.abs(..., out=...)
  forward_outplace: xp.abs(...)
  save_for_backward: xt0
  params:
  backward: ["gd0 * xp.sign(xd0)"]
  backward_additional:


Pow:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.power(..., ///, out=...)
  forward_outplace: xp.power(..., ///)
  save_for_backward: xt0, xt1, yt0
  params: shape
  backward: ["reverse_broadcast(gd0 * xd1 * yd0 / xd0, x0_shape)", "reverse_broadcast(gd0 * xp.log(xd0) * yd0, x1_shape)"]
  backward_additional:

Mul:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.multiply(..., ///, out=...)
  forward_outplace: xp.multiply(..., ///)
  save_for_backward: xt0, xt1
  params: shape
  backward: ["reverse_broadcast(gd0 * xd1, x0_shape)", "reverse_broadcast(gd0 * xd0, x1_shape)"]
  backward_additional:

Div:
  num_inputs: 2
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.divide(..., ///, out=...)
  forward_outplace: xp.divide(..., ///)
  save_for_backward: xt0, xt1
  params: shape
  backward: ["reverse_broadcast(gd0 / xd1, x0_shape)", "reverse_broadcast(-gd0 * xd0 / (xd1 * xd1), x1_shape)"]
  backward_additional:

Clamp:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: True
  forward_inplace: xp.clip(..., a_min=params['min'], a_max=params['max'], out=...)
  forward_outplace: xp.clip(..., a_min=params['min'], a_max=params['max'])
  save_for_backward: xt0
  params:
  backward: ["gd0"]
  backward_additional: ["lim_min = ctx.params['min']\nlim_max = ctx.params['max']\nif lim_min is not None:\n    gd0[xd0 < lim_min] = 0\nif lim_max is not None:\n    gd0[xd0 > lim_max] = 0"]

Max1:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: xp.max(...)
  save_for_backward: xt0, yt0
  params:
  backward: ["xp.zeros_like(xd0)"]
  backward_additional: ["grad0[xd0 == yd0] = gd0"]

Min1:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: xp.min(...)
  save_for_backward: xt0, yt0
  params:
  backward: ["xp.zeros_like(xd0)"]
  backward_additional: ["grad0[xd0 == yd0] = gd0"]

View:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: ....reshape(params['shape'])
  save_for_backward:
  params: shape
  backward: ["gd0.reshape(x0_shape)"]
  backward_additional:

Slice:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: ...[params['key']]
  save_for_backward:
  params: shape
  backward: ["xp.zeros(x0_shape, dtype=gd0.dtype)"]
  backward_additional: ["grad0[ctx.params['key']] = gd0"]

Permute:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: xp.transpose(..., params['dims'])
  save_for_backward:
  params:
  backward: ["xp.transpose(gd0, axes=tt.np.argsort(ctx.params['dims']))"]
  backward_additional:

Transpose:
  num_inputs: 1
  num_outputs: 1
  allow_inplace: False
  forward_inplace:
  forward_outplace: xp.swapaxes(xd0, params['dim0'], params['dim1'])
  save_for_backward:
  params:
  backward: ["xp.swapaxes(gd0, ctx.params['dim0'], ctx.params['dim1'])"]
  backward_additional: